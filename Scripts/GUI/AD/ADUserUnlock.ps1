#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 44edef10-2e31-4c78-b361-2532a3176b0d
# Source File: ADUserUnlock.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
9QEAAB+LCAAAAAAABACNkc1vgyAchu9N+j8Y71RR1+5ASbYYlx72kX7suiD+XFkpGNAu/e/HJjZ2
u+zGAy/Pmx+QNXB9AnPOWcvodBIE5MXoD+DtDzh8BWOFVjSZxSQawJ8VQsIqp1kGFdQ4RgmkGGV8
cYvKdI5RcpMmLMWLeRlXJPJhf9W3bM8NUCce4yDXsnJ1QTRusx48BvedkNUyjEO6aZlpu2bWWNt3
/UquoQYDikPRKd66IZbhZq8/0SMTqtDm+NbYOhz5hn0nrP8rXKmTPgB6kLpk0jojHhmDzZ4ZcMut
6SCkPuT0+ErfQz/n5V16ejbiXSgmvwNP7Aj0Lt9ZMDslNT84UePCJPqTmk5IdPXNX/WGaW71AQAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.3.130
     Generated on:       2016-12-08 18:55
     Generated by:       ibelmans
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZAMAAB+LCAAAAAAABAC9k99Lw0AMx98F/4djz+Xa2tU6uBZkshdBxYn6mnbpOLwfI7lz9L93mzJF
HwSRkpd8E5IPIYm6x86/Ig1XEEDsHNbe1ZMzmU+a0xMh1C3ptXZgFtrgDVhslgEoxI3cMKv0R/ZQ
c8mMtjUa+aA/I0NjufNkdJuIxw/WVGZ7S8Q8mhAJa4cxEJhE3MVdj+4ahwf/gq5uqwrKrjzPZ8UU
s4uZSo9dv1OWAwe0YzDkk3Yrv2W58GR5FOJ+U+OACLbarf/Cyoq+7Ks+z1dlBgX8znq2ZpSZ5p7w
/0FH+X7yKv36Vc0baArZVmQDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

####################################################################################################
### Begin: Script information ######################################################################
####################################################################################################

<#
.SYNOPSIS
    PowerShell GUI script to unlock an Active Directory user's account. 
.DESCRIPTION
    PowerShell GUI script to unlock an Active Directory user's account. 
.NOTES
    Author   : Ingvald Belmans
    Website  : http://www.supersysadmin.com
    Version  : 1.0 
    Changelog:
    	- 1.0 (2016-01-05) Initial version.
		- 1.1 (2016-12-08) Fixed bug where error handling was not working when using implicit remoting for the ActiveDirectory PowerShell module.
.LINK
    http://www.supersysadmin.com
#>

####################################################################################################
### End: Script information ########################################################################
####################################################################################################

####################################################################################################
### Begin: Main function ###########################################################################
####################################################################################################

#region function Main
function Main
{
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>	
	Param
	(
		[String]$Commandline
	)
	if ((Show-MainForm_psf) -eq 'OK')
	{
	}
	$global:ExitCode = 0 #Set the exit code for the Packager
}
#endregion

####################################################################################################
### End: Main function #############################################################################
####################################################################################################

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
jCIAAB+LCAAAAAAABADdWm1v6jYU/j5p/8HKp01CQBIoIAESL7fT1drdrum927fKBANeHRs5Tlv2
62cnoQRiiMMAXa4qoZqcV5/Hz3GO6D4in70ivhpDAYH8J8SM9iynalv9n38CoPuF4zmmkNxigv6A
AerfQ0xvGQ+qy3DWreUeJ0qTf5AvgFgtUc/yVqFAQfUvTKfsLawq3eSzAnSPKuBbGkWjWld/FTCK
iIg46lEUCQ5JBTxEE4L939Hqib0g2pu0WrDpN2/sjttA9XbHAlSG0rOUPRWuBfwFJlMuRa0Ro4Iz
EibpyVgfOFsiLlapziASzPMhQWMcIKrikKI3FWC73dpatEj1nk2R1b+Vngp1RgQjKjz8r1S4cd0K
cDrtQiWV0z2ikSc4Xq4TkWKPaIZkkj5ay61lkk2orc0V2scUB1GQRtXoVIDrtgq1VPlV1smeF4p7
AnLxwEIs5B5b/ZHcBsQ9nyNUrPuE3oXVH4y/hoh/pYT5L+DVrtbzep9epdlU6Y7B6Sa+Z7Xs1mIB
nbS3YG80Ix6vd+SLYf4bZ9FyyN7PDvW1IxXrl0gsI3EI9BrsUn/BuNV/YssKGDIhmDyed2gmKuAR
zxd5IOdN3DEfJrW0JY7bHQOVBDL52A1UU3DWJTjtjomvJzj5TKfo3ernT7JW2hNMHq5bSEJkohBD
cn/4xVh5xP5CWbkEXDK+TBFzEszkjSiWlKdf0iwjUKbYrjrNpZnqBnAtBQIjnQRx2vSN9CVBMUKG
kIcxN/hoKmsisGR9M/UYtc2OaiithpHKBrd5ftsPxMxzrVKW6pTGaAHpHE33bM1zRmSbA5X9BNof
zWV7+Z1yZNI1Br7PIlqSKjewcx0ZjZPv1yZEtxWAMd+5dacCmjrg7IeNcz66S3vvgSyKyz+MJHHQ
sxc/cZPb+RI4ONjxmg2JBLMDmmDBJJ4SlGI3JDAcXWc7BA27BKMU1jqvKK9n33AYQeKJFUFD6L+M
GIk7Bo90INvhJXk39l/Mduo5li2gpiuA45+RfBWTsHqRt2MRhccDsnUaOO7EUwqQ9hGALNPi4tiA
Cg6UiO6smNzZLiNUXkvDlK9aMVSO7JXqneDYVpm6LtEl66W7pI4KT9Ul0/jBLx4MUqSo9a/HNcxL
vSNkboFmxT/f5b4UlWniLsFbTtvc32He+t/n/GN8c/ZS7wyKypzwzzKubQyobw7ilzGSOJNelfD5
0suEpRmP5QKJR5uYoM2oLCmcepYpa4lJiAxaCw0tcLeqYD4CiaeG5cjOJKaEuw7HtIXp7YUBj10O
B4UF3zNnHMvlmL3RHZB/pxA3B/gdm2cxvovwa09vMGFqmvXjJvjpHe/Pz3BQv9d48eQ+uWTp+6Se
RjR2r5gu1PE5bm+lpuH22nW1v/nZjX5/tXY17y2HAsu/rVxxiRIKOK5Ise5ZyrTHcplCxSZ+qFLF
ZHZcpZSqaaGaTolC6Q2XqZOyUFSmQRiiQG4eCtce0m9W/SD0GSd4coICdGsfVne9JCW/hI+Tw6rY
o/pFw2UccfiG6fwYX3V31py1ZrY9bdahC4t9/R2Qi+Q0Yhyd3tHHMoF8t5b99Un/P2OcKQyMIgAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$FormMain = New-Object 'System.Windows.Forms.Form'
	$GroupBoxMainOutput = New-Object 'System.Windows.Forms.GroupBox'
	$RichTextBoxMainOutput = New-Object 'System.Windows.Forms.RichTextBox'
	$GroupBoxMainUnlockAccount = New-Object 'System.Windows.Forms.GroupBox'
	$ButtonMainUnlockAccountUnlockAccount = New-Object 'System.Windows.Forms.Button'
	$ButtonMainUnlockAccountQueryLockStatus = New-Object 'System.Windows.Forms.Button'
	$GroupBoxMainUserName = New-Object 'System.Windows.Forms.GroupBox'
	$TextBoxMainUserName = New-Object 'System.Windows.Forms.TextBox'
	$MenuStripMain = New-Object 'System.Windows.Forms.MenuStrip'
	$ToolStripMenuItemMainFile = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileLog = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileAbout = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileExit = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	####################################################################################################
	### Begin: Main form ###############################################################################
	####################################################################################################
	
	$FormMain_Load =
	{
		# Create log file
		$SSALogFileTimeStamp = Get-Date -UFormat "%Y%m%d_%H%M%S"
		$global:SSALogFile = New-Item -ItemType File -Path "$env:USERPROFILE\Documents" -Name "SSA_ADUserUnlock_$SSALogFileTimeStamp.log"
		# Set global ErrorActionPreference to Stop to ensure that error handling correctly works when using implicit remoting for the ActiveDirectory PowerShell module
		$global:ErrorActionPreference = "Stop"
		Add-SSAOutput -OutputText "Creating log file."
		if (Test-Path -Path $SSALogFile)
		{
			Add-SSAOutput -OutputText "Logfile $SSALogFile has been created."
		}
		else
		{
			Add-SSAOutput -OutputText "Logfile $SSALogFile could not be created."
		}
	}
	
	$FormMain_Shown =
	{
		Import-SSAActiveDirectoryModule
		if ($SSAActiveDirectoryModuleLoaded -eq $false)
		{
			[System.Windows.Forms.MessageBox]::Show("The ActiveDirectory PowerShell module could not be loaded. You can review the log for more details. Please restart the application to try again.", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		}
	}
	
	$ToolStripMenuItemMainFileLog_Click =
	{
		Invoke-Item -Path $SSALogFile
	}
	
	$ToolStripMenuItemMainFileAbout_Click =
	{
		Start-Process -FilePath "http://supersysadmin.com/100/powershell-gui-script-to-unlock-an-active-directory-users-account/"
	}
	
	$ToolStripMenuItemMainFileExit_Click =
	{
		$FormMain.Close()
	}
	
	$ButtonMainUnlockAccountQueryLockStatus_Click =
	{
		Add-SSAOutput -OutputText "Checking if ActiveDirectory PowerShell module is loaded."
		if ($SSAActiveDirectoryModuleLoaded -eq $true)
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is loaded."
			Get-SSAUserName
			if ($SSAUserName)
			{
				Add-SSAOutput -OutputText "Checking if user '$SSAUserName' is currently locked."
				try
				{
					$QueryADUser = Get-ADUser -Identity $SSAUserName -Properties LockedOut,lockoutTime -ErrorAction Stop
					if ($QueryADUser.LockedOut -eq $true)
					{
						$QueryADUserLockoutTime = [datetime]::FromFileTime($($QueryADUser.lockoutTime)).ToString('yyyy-MM-dd HH:mm:ss')
						Add-SSAOutput -OutputText "User '$SSAUserName' is currently locked (since $QueryADUserLockoutTime)."
					}
					else
					{
						Add-SSAOutput -OutputText "User '$SSAUserName' is currently not locked."
					}
				}
				catch [exception]
				{
					Add-SSAOutput -OutputText "$_"
				}
			}
			else
			{
				Add-SSAOutput -OutputText "UserName field is empty, please review your input."
			}
		}
		else
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is currently not loaded, cannot proceed with the request. Restart the application to attempt load the module."
		}
		
	}
	
	$ButtonMainUnlockAccountUnlockAccount_Click =
	{
		Add-SSAOutput -OutputText "Checking if ActiveDirectory PowerShell module is loaded."
		if ($SSAActiveDirectoryModuleLoaded -eq $true)
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is loaded."
			Get-SSAUserName
			if ($SSAUserName)
			{
				Add-SSAOutput -OutputText "Checking if user '$SSAUserName' is currently locked."
				try
				{
					$QueryADUser = Get-ADUser -Identity $SSAUserName -Properties LockedOut, lockoutTime -ErrorAction Stop
					if ($QueryADUser.LockedOut -eq $true)
					{
						$QueryADUserLockoutTime = [datetime]::FromFileTime($($QueryADUser.lockoutTime)).ToString('yyyy-MM-dd HH:mm:ss')
						Add-SSAOutput -OutputText "User '$SSAUserName' is currently locked (since $QueryADUserLockoutTime)."
						Add-SSAOutput -OutputText "Attempting to unlock '$SSAUserName'."
						Unlock-ADAccount -Identity $SSAUserName -ErrorAction Stop
						$QueryADUser = Get-ADUser -Identity $SSAUserName -Properties LockedOut, lockoutTime -ErrorAction Stop
						if ($QueryADUser.LockedOut -eq $false)
						{
							Add-SSAOutput -OutputText "User '$SSAUserName' is now unlocked."
						}
						else
						{
							Add-SSAOutput -OutputText "User '$SSAUserName' could not be unlocked."
						}
					}
					else
					{
						Add-SSAOutput -OutputText "User '$SSAUserName' is currently not locked."
					}
				}
				catch [exception]
				{
					Add-SSAOutput -OutputText "$_"
				}
			}
			else
			{
				Add-SSAOutput -OutputText "UserName field is empty, please review your input."
			}
		}
		else
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is currently not loaded, cannot proceed with the request. Restart the application to attempt load the module."
		}
	}
	
	$RichTextBoxMainOutput_TextChanged =
	{
		$RichTextBoxMainOutput.SelectionStart = $RichTextBoxMainOutput.Text.Length
		$RichTextBoxMainOutput.ScrollToCaret()
	}
	
	####################################################################################################
	### End: Main form #################################################################################
	####################################################################################################
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$FormMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_RichTextBoxMainOutput = $RichTextBoxMainOutput.Text
		$script:MainForm_TextBoxMainUserName = $TextBoxMainUserName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$RichTextBoxMainOutput.remove_TextChanged($RichTextBoxMainOutput_TextChanged)
			$ButtonMainUnlockAccountUnlockAccount.remove_Click($ButtonMainUnlockAccountUnlockAccount_Click)
			$ButtonMainUnlockAccountQueryLockStatus.remove_Click($ButtonMainUnlockAccountQueryLockStatus_Click)
			$FormMain.remove_Load($FormMain_Load)
			$FormMain.remove_Shown($FormMain_Shown)
			$ToolStripMenuItemMainFileLog.remove_Click($ToolStripMenuItemMainFileLog_Click)
			$ToolStripMenuItemMainFileAbout.remove_Click($ToolStripMenuItemMainFileAbout_Click)
			$ToolStripMenuItemMainFileExit.remove_Click($ToolStripMenuItemMainFileExit_Click)
			$FormMain.remove_Load($Form_StateCorrection_Load)
			$FormMain.remove_Closing($Form_StoreValues_Closing)
			$FormMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$FormMain.SuspendLayout()
	$GroupBoxMainOutput.SuspendLayout()
	$GroupBoxMainUnlockAccount.SuspendLayout()
	$GroupBoxMainUserName.SuspendLayout()
	$MenuStripMain.SuspendLayout()
	#
	# FormMain
	#
	$FormMain.Controls.Add($GroupBoxMainOutput)
	$FormMain.Controls.Add($GroupBoxMainUnlockAccount)
	$FormMain.Controls.Add($GroupBoxMainUserName)
	$FormMain.Controls.Add($MenuStripMain)
	$FormMain.AutoScaleDimensions = '6, 13'
	$FormMain.AutoScaleMode = 'Font'
	$FormMain.ClientSize = '633, 298'
	$FormMain.MainMenuStrip = $MenuStripMain
	$FormMain.MinimumSize = '649, 337'
	$FormMain.Name = 'FormMain'
	$FormMain.StartPosition = 'CenterScreen'
	$FormMain.Text = 'ADUserUnlock v1.0'
	$FormMain.add_Load($FormMain_Load)
	$FormMain.add_Shown($FormMain_Shown)
	#
	# GroupBoxMainOutput
	#
	$GroupBoxMainOutput.Controls.Add($RichTextBoxMainOutput)
	$GroupBoxMainOutput.Anchor = 'Top, Bottom, Left, Right'
	$GroupBoxMainOutput.Location = '13, 89'
	$GroupBoxMainOutput.Name = 'GroupBoxMainOutput'
	$GroupBoxMainOutput.Size = '609, 199'
	$GroupBoxMainOutput.TabIndex = 3
	$GroupBoxMainOutput.TabStop = $False
	$GroupBoxMainOutput.Text = 'Output'
	#
	# RichTextBoxMainOutput
	#
	$RichTextBoxMainOutput.Anchor = 'Top, Bottom, Left, Right'
	$RichTextBoxMainOutput.Font = 'Consolas, 8.25pt'
	$RichTextBoxMainOutput.Location = '7, 19'
	$RichTextBoxMainOutput.Name = 'RichTextBoxMainOutput'
	$RichTextBoxMainOutput.ScrollBars = 'ForcedVertical'
	$RichTextBoxMainOutput.Size = '596, 174'
	$RichTextBoxMainOutput.TabIndex = 0
	$RichTextBoxMainOutput.Text = ''
	$RichTextBoxMainOutput.add_TextChanged($RichTextBoxMainOutput_TextChanged)
	#
	# GroupBoxMainUnlockAccount
	#
	$GroupBoxMainUnlockAccount.Controls.Add($ButtonMainUnlockAccountUnlockAccount)
	$GroupBoxMainUnlockAccount.Controls.Add($ButtonMainUnlockAccountQueryLockStatus)
	$GroupBoxMainUnlockAccount.Location = '320, 28'
	$GroupBoxMainUnlockAccount.Name = 'GroupBoxMainUnlockAccount'
	$GroupBoxMainUnlockAccount.Size = '302, 54'
	$GroupBoxMainUnlockAccount.TabIndex = 2
	$GroupBoxMainUnlockAccount.TabStop = $False
	$GroupBoxMainUnlockAccount.Text = 'Unlock Account'
	#
	# ButtonMainUnlockAccountUnlockAccount
	#
	$ButtonMainUnlockAccountUnlockAccount.Location = '154, 20'
	$ButtonMainUnlockAccountUnlockAccount.Name = 'ButtonMainUnlockAccountUnlockAccount'
	$ButtonMainUnlockAccountUnlockAccount.Size = '142, 23'
	$ButtonMainUnlockAccountUnlockAccount.TabIndex = 1
	$ButtonMainUnlockAccountUnlockAccount.Text = 'Unlock Account'
	$ButtonMainUnlockAccountUnlockAccount.UseVisualStyleBackColor = $True
	$ButtonMainUnlockAccountUnlockAccount.add_Click($ButtonMainUnlockAccountUnlockAccount_Click)
	#
	# ButtonMainUnlockAccountQueryLockStatus
	#
	$ButtonMainUnlockAccountQueryLockStatus.Location = '7, 20'
	$ButtonMainUnlockAccountQueryLockStatus.Name = 'ButtonMainUnlockAccountQueryLockStatus'
	$ButtonMainUnlockAccountQueryLockStatus.Size = '141, 23'
	$ButtonMainUnlockAccountQueryLockStatus.TabIndex = 0
	$ButtonMainUnlockAccountQueryLockStatus.Text = 'Query Lock Status'
	$ButtonMainUnlockAccountQueryLockStatus.UseVisualStyleBackColor = $True
	$ButtonMainUnlockAccountQueryLockStatus.add_Click($ButtonMainUnlockAccountQueryLockStatus_Click)
	#
	# GroupBoxMainUserName
	#
	$GroupBoxMainUserName.Controls.Add($TextBoxMainUserName)
	$GroupBoxMainUserName.Location = '13, 28'
	$GroupBoxMainUserName.Name = 'GroupBoxMainUserName'
	$GroupBoxMainUserName.Size = '300, 54'
	$GroupBoxMainUserName.TabIndex = 1
	$GroupBoxMainUserName.TabStop = $False
	$GroupBoxMainUserName.Text = 'UserName (SamAccountName)'
	#
	# TextBoxMainUserName
	#
	$TextBoxMainUserName.Font = 'Consolas, 8.25pt'
	$TextBoxMainUserName.Location = '7, 20'
	$TextBoxMainUserName.Name = 'TextBoxMainUserName'
	$TextBoxMainUserName.Size = '287, 20'
	$TextBoxMainUserName.TabIndex = 0
	#
	# MenuStripMain
	#
	[void]$MenuStripMain.Items.Add($ToolStripMenuItemMainFile)
	$MenuStripMain.Location = '0, 0'
	$MenuStripMain.Name = 'MenuStripMain'
	$MenuStripMain.Size = '633, 24'
	$MenuStripMain.TabIndex = 0
	$MenuStripMain.Text = 'MenuStripMain'
	#
	# ToolStripMenuItemMainFile
	#
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileLog)
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileAbout)
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileExit)
	$ToolStripMenuItemMainFile.Name = 'ToolStripMenuItemMainFile'
	$ToolStripMenuItemMainFile.Size = '37, 20'
	$ToolStripMenuItemMainFile.Text = 'File'
	#
	# ToolStripMenuItemMainFileLog
	#
	$ToolStripMenuItemMainFileLog.Name = 'ToolStripMenuItemMainFileLog'
	$ToolStripMenuItemMainFileLog.Size = '107, 22'
	$ToolStripMenuItemMainFileLog.Text = 'Log'
	$ToolStripMenuItemMainFileLog.add_Click($ToolStripMenuItemMainFileLog_Click)
	#
	# ToolStripMenuItemMainFileAbout
	#
	$ToolStripMenuItemMainFileAbout.Name = 'ToolStripMenuItemMainFileAbout'
	$ToolStripMenuItemMainFileAbout.Size = '107, 22'
	$ToolStripMenuItemMainFileAbout.Text = 'About'
	$ToolStripMenuItemMainFileAbout.add_Click($ToolStripMenuItemMainFileAbout_Click)
	#
	# ToolStripMenuItemMainFileExit
	#
	$ToolStripMenuItemMainFileExit.Name = 'ToolStripMenuItemMainFileExit'
	$ToolStripMenuItemMainFileExit.Size = '152, 22'
	$ToolStripMenuItemMainFileExit.Text = 'Exit'
	$ToolStripMenuItemMainFileExit.add_Click($ToolStripMenuItemMainFileExit_Click)
	$MenuStripMain.ResumeLayout()
	$GroupBoxMainUserName.ResumeLayout()
	$GroupBoxMainUnlockAccount.ResumeLayout()
	$GroupBoxMainOutput.ResumeLayout()
	$FormMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $FormMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$FormMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$FormMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$FormMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $FormMain.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	####################################################################################################
	### Begin: Custom functions ########################################################################
	####################################################################################################
	
	#region function Add-SSAOutput
	function Add-SSAOutput
	{
		[CmdletBinding()]
		Param
		(
			[Parameter(
					   Mandatory = $true
					   )
			]
			$OutputText
		)
		Begin
		{
		}
		Process
		{
			$OutputDate = Get-Date -UFormat "%Y-%m-%d"
			$OutputTime = Get-Date -UFormat "%H:%M:%S"
			$RichTextBoxMainOutput.Text += "[$OutputDate][$OutputTime] $OutputText`n"
			Add-Content -Path $SSALogFile -Value "[$OutputDate][$OutputTime] $OutputText`n"
		}
		End
		{
		}
	}
	#endregion
	
	#region function Import-SSAActiveDirectoryModule
	function Import-SSAActiveDirectoryModule
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			Add-SSAOutput -OutputText "Loading ActiveDirectory PowerShell module."
			if ((Get-Module -name "ActiveDirectory") -eq $null)
			{
				Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is currently not loaded."
				if (Get-Module -ListAvailable | Where-Object { $_.name -eq "ActiveDirectory" })
				{
					Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is available, importing module."
					Import-Module -Name "ActiveDirectory"
					if ((Get-Module -name "ActiveDirectory") -eq $null)
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module could not be loaded."
						$global:SSAActiveDirectoryModuleLoaded = $false
					}
					else
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module has been loaded."
						$global:SSAActiveDirectoryModuleLoaded = $true
					}
				}
				else
				{
					Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is not available on this computer, attempting to import it from a Domain Controller."
					try
					{
						$DomainDNSName = (Get-WmiObject -Class WIN32_ComputerSystem -ErrorAction Stop).Domain
						$DomainNetBiosName = (Get-WmiObject Win32_NTDomain -Filter "DnsForestName = '$((Get-WmiObject Win32_ComputerSystem).Domain)'" -ErrorAction Stop).DomainName
						$DomainControllerName = ((Get-WmiObject -Class WIN32_NTDomain -Filter "DomainName = '$DomainNetBiosName'" -ErrorAction Stop).DomainControllerName) -replace "\\", ""
						$DomainController = "$DomainControllerName.$DomainDNSName"
						$DomainControllerSession = New-PSSession -Computername $DomainController -ErrorAction Stop
						Invoke-Command -Command { Import-Module -Name "ActiveDirectory" } -Session $DomainControllerSession -ErrorAction Stop
						$ImportSession = Import-PSSession -Session $DomainControllerSession -Module ActiveDirectory -AllowClobber -ErrorAction Stop
						if ($ImportSession.Name)
						{
							Add-SSAOutput -OutputText "ActiveDirectory PowerShell module has been imported from Domain Controller $DomainController."
							$global:SSAActiveDirectoryModuleLoaded = $true
						}
					}
					catch
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module could not be imported. Possible reasons are: This workstation is not joined to the Active Directory domain, PowerShell remoting towards the Domain Controller does not work or is not setup, the current user does not have appropriate rights to open a PowerShell session to the Domain Controller."
						$global:SSAActiveDirectoryModuleLoaded = $false
					}
				}
			}
			else
			{
				Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is already loaded."
				$global:SSAActiveDirectoryModuleLoaded = $true
			}
		}
		End
		{
		}
	}
	#endregion
	
	#region function Get-SSAUserName
	function Get-SSAUserName
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			$global:SSAUserName = $TextBoxMainUserName.text
		}
		End
		{
		}
	}
	#endregion
	
	####################################################################################################
	### End: Custom functions ##########################################################################
	####################################################################################################
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
