#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 71c976ed-5ef1-475a-a5c7-a288af2929d6
# Source File: ADUserResetPassword.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
/AEAAB+LCAAAAAAABACNkUFPgzAYhu9L9h8I945BZIyka6IhmB3UhU2v5hM+XLWjpC1b9u+tUham
F2992rfPm6+lBZbyiOqcgQE2nXge3Sj5gaX5AYsvqDSXDYtmcxoM4M5yLnCdsSQs02SBFYmxDslN
EgOBuEwIRMsl1FEapdWCBi7srrqW3blFZsVjHORSVLbOC8Zt2oFD767jolr5c59tDSjTtbNW677r
V7LAGhU2JeZdUxo7xMrf7uWJPABvcqkOr62u/ZFv2LfC+r/CdXOUn0juhXwDoa0xHBm97R4U2uVO
degzF7L68ErfQz/n5V16elL8nTcgvgOPcEB2mz1rVAVqNBvQ+iRVZX2tvUODP+HphAZXv/0FwIaM
0vwBAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.3.130
     Generated on:       2016-12-08 18:28
     Generated by:       ibelmans
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZAMAAB+LCAAAAAAABAC9k99Lw0AMx98F/4djz+Xa2tU6uBZkshdBxYn6mnbpOLwfI7lz9L93mzJF
HwSRkpd8E5IPIYm6x86/Ig1XEEDsHNbe1ZMzmU+a0xMh1C3ptXZgFtrgDVhslgEoxI3cMKv0R/ZQ
c8mMtjUa+aA/I0NjufNkdJuIxw/WVGZ7S8Q8mhAJa4cxEJhE3MVdj+4ahwf/gq5uqwrKrjzPZ8UU
s4uZSo9dv1OWAwe0YzDkk3Yrv2W58GR5FOJ+U+OACLbarf/Cyoq+7Ks+z1dlBgX8znq2ZpSZ5p7w
/0FH+X7yKv36Vc0baArZVmQDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

####################################################################################################
### Begin: Script information ######################################################################
####################################################################################################

<#
.SYNOPSIS
    PowerShell GUI script to reset an Active Directory user's password. 
.DESCRIPTION
    PowerShell GUI script to reset an Active Directory user's password.
.NOTES
    Author   : Ingvald Belmans
    Website  : http://www.supersysadmin.com
    Version  : 1.1 
    Changelog:
        - 1.0 (2016-01-04) Initial version.
		- 1.1 (2016-01-05) Cleanup output text and simplify try/catch for $ButtonMainChangePasswordChangePassword_Click.
		- 1.2 (2016-12-08) Fixed bug where error handling was not working when using implicit remoting for the ActiveDirectory PowerShell module.
.LINK
    http://www.supersysadmin.com
#>

####################################################################################################
### End: Script information ########################################################################
####################################################################################################

####################################################################################################
### Begin: Main function ###########################################################################
####################################################################################################

#region function Main
function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>	
	Param
	(
		[String]$Commandline
	)	
	if((Show-MainForm_psf) -eq 'OK')
	{		
	}	
	$global:ExitCode = 0 #Set the exit code for the Packager
}
#endregion

####################################################################################################
### End: Main function #############################################################################
####################################################################################################

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
xCgAAB+LCAAAAAAABADdWltv4jgUfl9p/4OVp1kJAQnlUgmQKJ2uRtt2qtKd3bfKBAPeJjFynFLm
1+9xQtpADLG5TVtVQjU5V58v3/GF9j1x2TPhi0ssMIJ/QsqCjuWUbav7+28Itb9zOqEB9q6oR26x
T7o3mAZXjPvlWThuV3KPE6Xhf8QVSCxmpGMNFqEgfvkfGozYPCxL3eSzhFSPSujHMoqzclX+lVA/
8kTESScgkeDYK6G7aOhR9y+yeGBPJOgMm01cd+sN+7x2RqqtcwsFEErHkvZkuBZyp9QbcRC1+iwQ
nHlhkh7EesfZjHCxWOr0IsEGLvbIJfVJIOMA0UYJ2bV2JRUtUr1hI2J1r8BToU7foyQQA/oTFOr1
WgnVWnahkszphgTRQHA6SxMBsXsyJpCkS1K5VCaZhEpqrtA+Dagf+cuoGucldOZUC7Vk+WXWyZwX
ig8E5uKOhVTAHFvdPkwD4QOXE1Ks+0BehNXtXf4dEn5PQiLucBjOGR+hZ7vs5NW/PoP1pe41w6O3
MB/lsF2JBVTSgymbBxnxeLwmX4z2PzmLZhfs5eiITx3JWL9HYhaJbdhXQDhwp4xb3Qc2K6ELJgSD
t/SajEUJ3dPJNI/nvIlr5uKkpDbA2W6ca+gk0MkHr6G6BKnTAl/nOr4e8PBbMCIvoKQnPRAMXrIr
7IVERyGG5ubwi8FyT92ptHIKvGR86ULmIKDJG5FsCSwAdMs8DCm2yk59pqf6hrhmCSmIajPilOlr
6QNRMc+7wDyMycElI6iJoMD+euoJaje/Idtwq5dhAsTMc6VSluukRn+KgwkZbZiax4zIKglK+wm0
X5vM6vCdkmSSTNo+zMjyDXc1B8JxWjsx3WoE2oznODa8JA0jwssvYQ5GeEkWaFsaxQjoT4n7dAoE
pI7y87866olbyO6aTdjWNeR2cDQMSWmH4Aw4x6lKkjwzpJz8mlQbCggLJANF+pHCsu4HDSPsDcTC
IxfYfeozL+4wPFJCcpVrtLB2EUGfCo6OtMRNUSn3AlfdBFx68RjjSUV92/CkiT9NatkfQWudEHZl
7pPuZD3G0p+jHd6S+b690HagL+3WCjPetftgrQp9sKm5lF+iL79DPFgfhBTemO+LmFOX/LFbMzzV
FiCzyMvMv2NKSQdZv8Mm7qxpwGYbYjehr5Z+ezZth0BCSe0yvHHYJvZrMWL/EoyY7vE2xG6EEX2f
pru0vTDyQZqKPKWLa7FHR9lxc5W6NmgnkHRdtTwxY4MDtZM0fvRlgP2e67IoEHL8cXqKXvHfH1ds
Qc7xeWLv9/z15P/opV67YzB5w79BXKsYkN9sxS9jXuIMvErh46WXCUtxs5ILJL4Vox55u2VJCief
ZcpqcHoOQSuhoQTuShX0T83lhZPyLMAQrkru8iGmUMakuNDKAnp1oEFipwNBYbU33E9dwvCSzYM1
hL9TfOujuzdk8nqgkkH0KsA/eoLXbPKZ0/v6QjeXT/OCd6Px4hvfZIWlbpJqDlHY/cB0IdG129yC
pub02vF5nOIOXDm/SruKk7BtgeXPvz5wiRKG261Ise5RyrTBskmhYhOfqlQxme1WKamqW6i6Y1Ao
tWGTOkkLRWXqhSHxYfJImHpYfrPo+qHLuEeHByhAu/Jqdd1LUvJT+Dg4rIo9yl/CncYRx3MaTHbx
Va2N6+Pm2LZH9Squ4WJf//reSXLqM04O7+h1mEC+Xcn+arH7PxF4txHEKAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$FormMain = New-Object 'System.Windows.Forms.Form'
	$GroupBoxMainOutput = New-Object 'System.Windows.Forms.GroupBox'
	$RichTextBoxMainOutput = New-Object 'System.Windows.Forms.RichTextBox'
	$GroupBoxMainChangePassword = New-Object 'System.Windows.Forms.GroupBox'
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon = New-Object 'System.Windows.Forms.CheckBox'
	$ButtonMainChangePasswordChangePassword = New-Object 'System.Windows.Forms.Button'
	$GroupBoxMainNewPassword = New-Object 'System.Windows.Forms.GroupBox'
	$TextBoxMainNewPassword2 = New-Object 'System.Windows.Forms.TextBox'
	$TextBoxMainNewPassword1 = New-Object 'System.Windows.Forms.TextBox'
	$GroupBoxMainUserName = New-Object 'System.Windows.Forms.GroupBox'
	$TextBoxMainUserName = New-Object 'System.Windows.Forms.TextBox'
	$MenuStripMain = New-Object 'System.Windows.Forms.MenuStrip'
	$ToolStripMenuItemMainFile = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileLog = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileAbout = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$ToolStripMenuItemMainFileExit = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	####################################################################################################
	### Begin: Main form ###############################################################################
	####################################################################################################
	
	$FormMain_Load =
	{
		# Create log file
		$SSALogFileTimeStamp = Get-Date -UFormat "%Y%m%d_%H%M%S"
		$global:SSALogFile = New-Item -ItemType File -Path "$env:USERPROFILE\Documents" -Name "SSA_ADUserResetPassword_$SSALogFileTimeStamp.log"
		# Set global ErrorActionPreference to Stop to ensure that error handling correctly works when using implicit remoting for the ActiveDirectory PowerShell module
		$global:ErrorActionPreference = "Stop"
		Add-SSAOutput -OutputText "Creating log file."
		if (Test-Path -Path $SSALogFile)
		{
			Add-SSAOutput -OutputText "Logfile $SSALogFile has been created."
		}
		else
		{
			Add-SSAOutput -OutputText "Logfile $SSALogFile could not be created."
		}
	}
	
	$FormMain_Shown =
	{
		Import-SSAActiveDirectoryModule
		if ($SSAActiveDirectoryModuleLoaded -eq $false)
		{
			[System.Windows.Forms.MessageBox]::Show("The ActiveDirectory PowerShell module could not be loaded. You can review the log for more details. Please restart the application to try again.", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
		}	
	}
	
	$ToolStripMenuItemMainFileAbout_Click =
	{
		Start-Process -FilePath "http://supersysadmin.com/96/powershell-gui-script-to-reset-an-active-directory-users-password/"	
	}
	
	$ToolStripMenuItemMainFileLog_Click =
	{
		Invoke-Item -Path $SSALogFile
	}
	
	$ToolStripMenuItemMainFileExit_Click =
	{
		$FormMain.Close()
	}
	
	$ButtonMainChangePasswordChangePassword_Click =
	{
		Add-SSAOutput -OutputText "Checking if ActiveDirectory PowerShell module is loaded."
		if ($SSAActiveDirectoryModuleLoaded -eq $true)
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is loaded."
			Get-SSAUserName
			if ($SSAUserName)
			{
				Add-SSAOutput -OutputText "Changing password of user '$SSAUserName'."
				try
				{
					$QueryADUser = Get-ADUser -Identity $SSAUserName -ErrorAction Stop
					Get-SSAPassword1
					Get-SSAPassword2
					if ($SSAPassword1 -and $SSAPassword2)
					{
						if ($SSAPassword1 -eq $SSAPassword2)
						{
							if ($CheckBoxMainChangePasswordChangePasswordAtNextLogon.Checked)
							{
								Set-ADAccountPassword -Identity $SSAUserName -NewPassword (ConvertTo-SecureString -String $SSAPassword1 -AsPlainText –Force) –Reset -ErrorAction Stop -PassThru
								Set-ADUser -Identity $SSAUserName -ChangePasswordAtLogon $True -ErrorAction Stop
								Add-SSAOutput -OutputText "Password for user '$SSAUserName' has been updated and needs to be changed at next logon."
							}
							else
							{
								Set-ADAccountPassword -Identity $SSAUserName -NewPassword (ConvertTo-SecureString -String $SSAPassword1 -AsPlainText –Force) –Reset -ErrorAction Stop
								Add-SSAOutput -OutputText "Password for user '$SSAUserName' has been updated."
							}
						}
						else
						{
							Add-SSAOutput -OutputText "Passwords do not match, please review your input."
						}
					}
					else
					{
						Add-SSAOutput -OutputText "One or both password fields are empty, please review your input."
					}
				}
				catch
				{
					Add-SSAOutput -OutputText "$_"
				}			
			}
			else
			{
				Add-SSAOutput -OutputText "UserName field is empty, please review your input."
			}		
		}
		else
		{
			Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is currently not loaded, cannot proceed with the request. Restart the application to attempt load the module."
		}
	}
	
	$RichTextBoxMainOutput_TextChanged =
	{
		$RichTextBoxMainOutput.SelectionStart = $RichTextBoxMainOutput.Text.Length
		$RichTextBoxMainOutput.ScrollToCaret()
	}
	
	####################################################################################################
	### End: Main form #################################################################################
	####################################################################################################
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$FormMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_RichTextBoxMainOutput = $RichTextBoxMainOutput.Text
		$script:MainForm_CheckBoxMainChangePasswordChangePasswordAtNextLogon = $CheckBoxMainChangePasswordChangePasswordAtNextLogon.Checked
		$script:MainForm_TextBoxMainNewPassword2 = $TextBoxMainNewPassword2.Text
		$script:MainForm_TextBoxMainNewPassword1 = $TextBoxMainNewPassword1.Text
		$script:MainForm_TextBoxMainUserName = $TextBoxMainUserName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$RichTextBoxMainOutput.remove_TextChanged($RichTextBoxMainOutput_TextChanged)
			$ButtonMainChangePasswordChangePassword.remove_Click($ButtonMainChangePasswordChangePassword_Click)
			$FormMain.remove_Load($FormMain_Load)
			$FormMain.remove_Shown($FormMain_Shown)
			$ToolStripMenuItemMainFileLog.remove_Click($ToolStripMenuItemMainFileLog_Click)
			$ToolStripMenuItemMainFileAbout.remove_Click($ToolStripMenuItemMainFileAbout_Click)
			$ToolStripMenuItemMainFileExit.remove_Click($ToolStripMenuItemMainFileExit_Click)
			$FormMain.remove_Load($Form_StateCorrection_Load)
			$FormMain.remove_Closing($Form_StoreValues_Closing)
			$FormMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$FormMain.SuspendLayout()
	$GroupBoxMainOutput.SuspendLayout()
	$GroupBoxMainChangePassword.SuspendLayout()
	$GroupBoxMainNewPassword.SuspendLayout()
	$GroupBoxMainUserName.SuspendLayout()
	$MenuStripMain.SuspendLayout()
	#
	# FormMain
	#
	$FormMain.Controls.Add($GroupBoxMainOutput)
	$FormMain.Controls.Add($GroupBoxMainChangePassword)
	$FormMain.Controls.Add($GroupBoxMainNewPassword)
	$FormMain.Controls.Add($GroupBoxMainUserName)
	$FormMain.Controls.Add($MenuStripMain)
	$FormMain.AutoScaleDimensions = '6, 13'
	$FormMain.AutoScaleMode = 'Font'
	$FormMain.ClientSize = '553, 381'
	$FormMain.MainMenuStrip = $MenuStripMain
	$FormMain.MinimumSize = '569, 420'
	$FormMain.Name = 'FormMain'
	$FormMain.StartPosition = 'CenterScreen'
	$FormMain.Text = 'ADUserResetPassword v1.2'
	$FormMain.add_Load($FormMain_Load)
	$FormMain.add_Shown($FormMain_Shown)
	#
	# GroupBoxMainOutput
	#
	$GroupBoxMainOutput.Controls.Add($RichTextBoxMainOutput)
	$GroupBoxMainOutput.Anchor = 'Top, Bottom, Left, Right'
	$GroupBoxMainOutput.Location = '13, 169'
	$GroupBoxMainOutput.Name = 'GroupBoxMainOutput'
	$GroupBoxMainOutput.Size = '528, 199'
	$GroupBoxMainOutput.TabIndex = 5
	$GroupBoxMainOutput.TabStop = $False
	$GroupBoxMainOutput.Text = 'Output'
	#
	# RichTextBoxMainOutput
	#
	$RichTextBoxMainOutput.Anchor = 'Top, Bottom, Left, Right'
	$RichTextBoxMainOutput.Font = 'Consolas, 8.25pt'
	$RichTextBoxMainOutput.Location = '7, 20'
	$RichTextBoxMainOutput.Name = 'RichTextBoxMainOutput'
	$RichTextBoxMainOutput.ScrollBars = 'ForcedVertical'
	$RichTextBoxMainOutput.Size = '513, 169'
	$RichTextBoxMainOutput.TabIndex = 0
	$RichTextBoxMainOutput.Text = ''
	$RichTextBoxMainOutput.add_TextChanged($RichTextBoxMainOutput_TextChanged)
	#
	# GroupBoxMainChangePassword
	#
	$GroupBoxMainChangePassword.Controls.Add($CheckBoxMainChangePasswordChangePasswordAtNextLogon)
	$GroupBoxMainChangePassword.Controls.Add($ButtonMainChangePasswordChangePassword)
	$GroupBoxMainChangePassword.Location = '320, 28'
	$GroupBoxMainChangePassword.Name = 'GroupBoxMainChangePassword'
	$GroupBoxMainChangePassword.Size = '221, 86'
	$GroupBoxMainChangePassword.TabIndex = 3
	$GroupBoxMainChangePassword.TabStop = $False
	$GroupBoxMainChangePassword.Text = 'Change Password'
	#
	# CheckBoxMainChangePasswordChangePasswordAtNextLogon
	#
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.Location = '6, 20'
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.Name = 'CheckBoxMainChangePasswordChangePasswordAtNextLogon'
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.Size = '207, 24'
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.TabIndex = 1
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.Text = 'Change Password at Next Logon'
	$CheckBoxMainChangePasswordChangePasswordAtNextLogon.UseVisualStyleBackColor = $True
	#
	# ButtonMainChangePasswordChangePassword
	#
	$ButtonMainChangePasswordChangePassword.Location = '6, 50'
	$ButtonMainChangePasswordChangePassword.Name = 'ButtonMainChangePasswordChangePassword'
	$ButtonMainChangePasswordChangePassword.Size = '207, 28'
	$ButtonMainChangePasswordChangePassword.TabIndex = 4
	$ButtonMainChangePasswordChangePassword.Text = 'Change Password'
	$ButtonMainChangePasswordChangePassword.UseVisualStyleBackColor = $True
	$ButtonMainChangePasswordChangePassword.add_Click($ButtonMainChangePasswordChangePassword_Click)
	#
	# GroupBoxMainNewPassword
	#
	$GroupBoxMainNewPassword.Controls.Add($TextBoxMainNewPassword2)
	$GroupBoxMainNewPassword.Controls.Add($TextBoxMainNewPassword1)
	$GroupBoxMainNewPassword.Location = '12, 88'
	$GroupBoxMainNewPassword.Name = 'GroupBoxMainNewPassword'
	$GroupBoxMainNewPassword.Size = '301, 75'
	$GroupBoxMainNewPassword.TabIndex = 2
	$GroupBoxMainNewPassword.TabStop = $False
	$GroupBoxMainNewPassword.Text = 'New Password (twice)'
	#
	# TextBoxMainNewPassword2
	#
	$TextBoxMainNewPassword2.Font = 'Consolas, 8.25pt'
	$TextBoxMainNewPassword2.Location = '8, 47'
	$TextBoxMainNewPassword2.Name = 'TextBoxMainNewPassword2'
	$TextBoxMainNewPassword2.Size = '286, 20'
	$TextBoxMainNewPassword2.TabIndex = 1
	$TextBoxMainNewPassword2.UseSystemPasswordChar = $True
	#
	# TextBoxMainNewPassword1
	#
	$TextBoxMainNewPassword1.Font = 'Consolas, 8.25pt'
	$TextBoxMainNewPassword1.Location = '7, 20'
	$TextBoxMainNewPassword1.Name = 'TextBoxMainNewPassword1'
	$TextBoxMainNewPassword1.Size = '287, 20'
	$TextBoxMainNewPassword1.TabIndex = 0
	$TextBoxMainNewPassword1.UseSystemPasswordChar = $True
	#
	# GroupBoxMainUserName
	#
	$GroupBoxMainUserName.Controls.Add($TextBoxMainUserName)
	$GroupBoxMainUserName.Location = '12, 28'
	$GroupBoxMainUserName.Name = 'GroupBoxMainUserName'
	$GroupBoxMainUserName.Size = '300, 54'
	$GroupBoxMainUserName.TabIndex = 1
	$GroupBoxMainUserName.TabStop = $False
	$GroupBoxMainUserName.Text = 'UserName (SamAccountName)'
	#
	# TextBoxMainUserName
	#
	$TextBoxMainUserName.Font = 'Consolas, 8.25pt'
	$TextBoxMainUserName.Location = '7, 20'
	$TextBoxMainUserName.Name = 'TextBoxMainUserName'
	$TextBoxMainUserName.Size = '287, 20'
	$TextBoxMainUserName.TabIndex = 0
	#
	# MenuStripMain
	#
	[void]$MenuStripMain.Items.Add($ToolStripMenuItemMainFile)
	$MenuStripMain.Location = '0, 0'
	$MenuStripMain.Name = 'MenuStripMain'
	$MenuStripMain.Size = '553, 24'
	$MenuStripMain.TabIndex = 0
	$MenuStripMain.Text = 'menustrip1'
	#
	# ToolStripMenuItemMainFile
	#
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileAbout)
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileLog)
	[void]$ToolStripMenuItemMainFile.DropDownItems.Add($ToolStripMenuItemMainFileExit)
	$ToolStripMenuItemMainFile.Name = 'ToolStripMenuItemMainFile'
	$ToolStripMenuItemMainFile.Size = '37, 20'
	$ToolStripMenuItemMainFile.Text = 'File'
	#
	# ToolStripMenuItemMainFileLog
	#
	$ToolStripMenuItemMainFileLog.Name = 'ToolStripMenuItemMainFileLog'
	$ToolStripMenuItemMainFileLog.Size = '107, 22'
	$ToolStripMenuItemMainFileLog.Text = 'Log'
	$ToolStripMenuItemMainFileLog.add_Click($ToolStripMenuItemMainFileLog_Click)
	#
	# ToolStripMenuItemMainFileAbout
	#
	$ToolStripMenuItemMainFileAbout.Name = 'ToolStripMenuItemMainFileAbout'
	$ToolStripMenuItemMainFileAbout.Size = '107, 22'
	$ToolStripMenuItemMainFileAbout.Text = 'About'
	$ToolStripMenuItemMainFileAbout.add_Click($ToolStripMenuItemMainFileAbout_Click)
	#
	# ToolStripMenuItemMainFileExit
	#
	$ToolStripMenuItemMainFileExit.Name = 'ToolStripMenuItemMainFileExit'
	$ToolStripMenuItemMainFileExit.Size = '152, 22'
	$ToolStripMenuItemMainFileExit.Text = 'Exit'
	$ToolStripMenuItemMainFileExit.add_Click($ToolStripMenuItemMainFileExit_Click)
	$MenuStripMain.ResumeLayout()
	$GroupBoxMainUserName.ResumeLayout()
	$GroupBoxMainNewPassword.ResumeLayout()
	$GroupBoxMainChangePassword.ResumeLayout()
	$GroupBoxMainOutput.ResumeLayout()
	$FormMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $FormMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$FormMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$FormMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$FormMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $FormMain.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	####################################################################################################
	### Begin: Custom functions ########################################################################
	####################################################################################################
	
	#region function Add-SSAOutput
	function Add-SSAOutput
	{
		[CmdletBinding()]
		Param
		(
			[Parameter(
				Mandatory = $true
				 )
			]
			$OutputText
		)
		Begin
		{
		}
		Process
		{
			$OutputDate = Get-Date -UFormat "%Y-%m-%d"
			$OutputTime = Get-Date -UFormat "%H:%M:%S"
			$RichTextBoxMainOutput.Text += "[$OutputDate][$OutputTime] $OutputText`n"
			Add-Content -Path $SSALogFile -Value "[$OutputDate][$OutputTime] $OutputText`n"
		}
		End
		{
		}
	}
	#endregion
	
	#region function Import-SSAActiveDirectoryModule
	function Import-SSAActiveDirectoryModule
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			Add-SSAOutput -OutputText "Loading ActiveDirectory PowerShell module."
			if ((Get-Module -name "ActiveDirectory") -eq $null)
			{
				Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is currently not loaded."
				if (Get-Module -ListAvailable | Where-Object { $_.name -eq "ActiveDirectory" })
				{
					Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is available, importing module."
					Import-Module -Name "ActiveDirectory"
					if ((Get-Module -name "ActiveDirectory") -eq $null)
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module could not be loaded."
						$global:SSAActiveDirectoryModuleLoaded = $false
					}
					else
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module has been loaded."
						$global:SSAActiveDirectoryModuleLoaded = $true
					}
				}
				else
				{
					Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is not available on this computer, attempting to import it from a Domain Controller."
					try
					{
						$DomainDNSName = (Get-WmiObject -Class WIN32_ComputerSystem -ErrorAction Stop).Domain
						$DomainNetBiosName = (Get-WmiObject Win32_NTDomain -Filter "DnsForestName = '$((Get-WmiObject Win32_ComputerSystem).Domain)'" -ErrorAction Stop).DomainName
						$DomainControllerName = ((Get-WmiObject -Class WIN32_NTDomain -Filter "DomainName = '$DomainNetBiosName'" -ErrorAction Stop).DomainControllerName) -replace "\\", ""
						$DomainController = "$DomainControllerName.$DomainDNSName"
						$DomainControllerSession = New-PSSession -Computername $DomainController -ErrorAction Stop
						Invoke-Command -Command { Import-Module -Name "ActiveDirectory" } -Session $DomainControllerSession -ErrorAction Stop
						$ImportSession = Import-PSSession -Session $DomainControllerSession -Module ActiveDirectory -AllowClobber -ErrorAction Stop
						if ($ImportSession.Name)
						{
							Add-SSAOutput -OutputText "ActiveDirectory PowerShell module has been imported from Domain Controller $DomainController."
							$global:SSAActiveDirectoryModuleLoaded = $true
						}
					}
					catch
					{
						Add-SSAOutput -OutputText "ActiveDirectory PowerShell module could not be imported. Possible reasons are: This workstation is not joined to the Active Directory domain, PowerShell remoting towards the Domain Controller does not work or is not setup, the current user does not have appropriate rights to open a PowerShell session to the Domain Controller."
						$global:SSAActiveDirectoryModuleLoaded = $false
					}
				}
			}
			else
			{
				Add-SSAOutput -OutputText "ActiveDirectory PowerShell module is already loaded."
				$global:SSAActiveDirectoryModuleLoaded = $true
			}
		}
		End
		{
		}
	}
	#endregion
	
	#region function Get-SSAUserName
	function Get-SSAUserName
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			$global:SSAUserName = $TextBoxMainUserName.text
		}
		End
		{
		}
	}
	#endregion
	
	#region function Get-SSAPassword1
	function Get-SSAPassword1
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			$global:SSAPassword1 = $TextBoxMainNewPassword1.text
		}
		End
		{
		}
	}
	#endregion
	
	#region function Get-SSAPassword2
	function Get-SSAPassword2
	{
		[CmdletBinding()]
		Param
		(
		)
		Begin
		{
		}
		Process
		{
			$global:SSAPassword2 = $TextBoxMainNewPassword2.text
		}
		End
		{
		}
	}
	#endregion
	
	####################################################################################################
	### End: Custom functions ##########################################################################
	####################################################################################################
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
